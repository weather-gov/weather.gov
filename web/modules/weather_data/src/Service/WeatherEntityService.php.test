<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\weather_data\Service\WeatherEntityService;
use PHPUnit\Framework\TestCase;
use Drupal\Core\Entity\Query\QueryInterface;

/**
 * Tests for the WeatherEntityService.
 */
final class WeatherEntityServiceTest extends TestCase
{
    protected $entityService;

    protected $entityTypeManager;

    /**
     * Common setup for all component tests.
     */
    protected function setUp(): void
    {
        parent::setUp();

        $this->entityTypeManager = $this->createStub(
            EntityTypeManagerInterface::class,
        );

        $this->entityService = new WeatherEntityService(
            $this->entityTypeManager,
        );

        $this->taxonomyStore = $this->createStub(EntityStorageInterface::class);
        $this->nodeStore = $this->createStub(EntityStorageInterface::class);

        $this->entityTypeManager
            ->method("getStorage")
            ->will(
                $this->returnValueMap([
                    ["taxonomy_term", $this->taxonomyStore],
                    ["node", $this->nodeStore],
                ]),
            );
    }

    protected function setupTaxonomyID($id = "100")
    {
        $taxonomyTermEntity = $this->createStub(
            FieldableEntityInterface::class,
        );
        $taxonomyIDField = $this->createStub(FieldItemListInterface::class);
        $taxonomyTermEntity
            ->method("get")
            ->will($this->returnValueMap([["tid", $taxonomyIDField]]));
        $taxonomyIDField->method("getString")->willReturn("$id");

        $this->taxonomyStore
            ->method("loadByProperties")
            ->willReturn([$taxonomyTermEntity]);
    }

    protected function setupFetchNodeWithTaxonomyID(
        $taxonomyID,
        $taxonomyFieldMachineName,
        $nodeID = "node1",
    ) {
        // Setup fetching the weather story node ID.
        $query = $this->createStub(QueryInterface::class);
        $this->nodeStore->method("getQuery")->willReturn($query);
        $query
            ->method("accessCheck")
            ->will($this->returnValueMap([[false, $query]]));
        $query
            ->method("condition")
            ->will(
                $this->returnValueMap([
                    ["status", 1, null, null, $query],
                    ["type", "node type", null, null, $query],
                    [
                        $taxonomyFieldMachineName,
                        "$taxonomyID",
                        null,
                        null,
                        $query,
                    ],
                ]),
            );
        $query
            ->method("sort")
            ->will($this->returnValueMap([["changed", "DESC", null, $query]]));
        $query->method("range")->will($this->returnValueMap([[0, 1, $query]]));
        $query->method("execute")->willReturn(["$nodeID"]);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetLatestNodeWithNoWFOTaxonomyTerm(): void
    {
        $this->taxonomyStore->method("loadByProperties")->willReturn([]);

        $expected = false;

        $actual = $this->entityService->getLatestNodeFromWFO(
            "wfo",
            "node type",
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetWithNoWFONodes(): void
    {
        $this->setupTaxonomyID("100");

        $this->setupFetchNodeWithTaxonomyID("100", "field_wfo", "node1");

        $this->nodeStore
            ->method("load")
            ->will($this->returnValueMap([["node1", null]]));

        $actual = $this->entityService->getLatestNodeFromWFO(
            "wfo",
            "node type",
        );

        $this->assertEquals(false, $actual);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetWithAWFONode(): void
    {
        $this->setupTaxonomyID("100");

        $this->setupFetchNodeWithTaxonomyID("100", "field_wfo", "node1");

        $node = $this->createStub(FieldItemListInterface::class);

        $this->nodeStore
            ->method("load")
            ->will($this->returnValueMap([["node1", $node]]));

        $actual = $this->entityService->getLatestNodeFromWFO(
            "wfo",
            "node type",
        );

        $this->assertEquals($node, $actual);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetLatestNodeWithNoHazardTypeTaxonomyTerm(): void
    {
        $this->taxonomyStore->method("loadByProperties")->willReturn([]);

        $expected = false;

        $actual = $this->entityService->getLatestNodeFromWeatherEvent(
            "wfo",
            "1",
            "2",
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetWithNoHazardInfoNodes(): void
    {
        $this->setupTaxonomyID("100");

        $this->setupFetchNodeWithTaxonomyID(
            "100",
            "field_weather_event_type",
            "node1",
        );

        $this->nodeStore
            ->method("load")
            ->will($this->returnValueMap([["node1", null]]));

        $actual = $this->entityService->getLatestNodeFromWeatherEvent(
            "heriken",
            "node type",
        );

        $this->assertEquals(false, $actual);
    }

    /**
     * @group unit
     * @group entity-service
     */
    public function testGetWithAHazardInfoNode(): void
    {
        $this->setupTaxonomyID("100");

        $this->setupFetchNodeWithTaxonomyID(
            "100",
            "field_weather_event_type",
            "node1",
        );

        $node = $this->createStub(FieldItemListInterface::class);

        $this->nodeStore
            ->method("load")
            ->will($this->returnValueMap([["node1", $node]]));

        $actual = $this->entityService->getLatestNodeFromWeatherEvent(
            "ternayda",
            "node type",
        );

        $this->assertEquals($node, $actual);
    }
}
