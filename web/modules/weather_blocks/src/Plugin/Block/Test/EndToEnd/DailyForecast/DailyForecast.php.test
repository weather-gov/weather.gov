<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\DailyForecastBlock;

/**
 * Tests for daily forecast data structure.
 */
final class DailyForecastStructureTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(DailyForecastBlock::class);
    }

    /**
     * Simply validate the data structure.
     * @group e2e
     */
    public function testDailyForecastDataStructure(): void
    {
        $this->onLocationRoute(34.749, -92.275);

        $schema = SchemaHelper::load("daily.json");

        $data = $this->block->build();

        // Convert associative arrays into objects, because JSON (and thus JSON
        // schema have no concept of associative arrays)
        $schema->in(json_decode(json_encode($data)));
        $this->assertTrue(true);
    }

    /**
     * Ensures that we correctly format for an overnight
     * period, which is what the user should see if
     * looking between midnight and 6am of the current
     * day.
     * @group e2e
     */
    public function testDailyForecastOvernightPeriod()
    {
        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("Pacific/Honolulu"));
        $now = $now->setTime(2, 0, 0);

        // Honolulu
        $this->onLocationRoute(21.305, -157.858);

        // Expected start and end
        $expectedStart = $now->setTime(0, 0, 0);
        $expectedEnd = $now->setTime(6, 0, 0);

        // Expected overall structure
        $expectedStructure = [
            "shortDayName" => $expectedStart->format("D"),
            "dayName" => $expectedStart->format("l"),
            "monthAndDay" => $expectedStart->format("M j"),
            "startTime" => $expectedStart->format("c"),
            "shortForecast" => "Scattered rain showers",
            "icon" => (object) [
                "icon" => "showers_scattered_rain.svg",
                "base" => "showers_scattered_rain",
            ],
            "temperature" => 75,
            "probabilityOfPrecipitation" => 40,
            "isDaytime" => false,
            "isOvernight" => true,
            "timeLabel" => "NOW-6AM",
        ];

        $data = $this->block->build($now);
        $actualStructure = $data["today"][0];

        // Get rid of the hourly stuff.
        // For this case, we don't care about it
        unset($actualStructure["hourlyPeriods"]);

        $this->assertEquals($expectedStructure, $actualStructure);
    }

    /**
     * Ensure that when it is after midnight local time and the API still
     * returns a starting time before midnight, we return the correct data.
     *
     * https://github.com/weather-gov/weather.gov/issues/1151
     *
     * @group e2e
     */
    public function testAfterMidnightButDataIsBeforeMidnight()
    {
        $now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2024-05-07T00:03:00-0500",
        );

        $this->onLocationRoute(32.778, -96.796);

        $expected = [
            [
                "shortDayName" => "Tue",
                "dayName" => "Tuesday",
                "monthAndDay" => "May 7",
                "startTime" => "2024-05-06T23:00:00-05:00",
                "shortForecast" => "First period",
                "icon" => (object) [
                    "icon" => "thunderstorm.svg",
                    "base" => "thunderstorm",
                ],
                "temperature" => 83,
                "probabilityOfPrecipitation" => 30,
                "isDaytime" => false,
                "isOvernight" => true,
                "timeLabel" => "NOW-6AM",
            ],
            [
                "shortDayName" => "Tue",
                "dayName" => "Tuesday",
                "monthAndDay" => "May 7",
                "startTime" => "2024-05-07T06:00:00-05:00",
                "shortForecast" => "Second period",
                "icon" => (object) [
                    "icon" => "thunderstorm.svg",
                    "base" => "thunderstorm",
                ],
                "temperature" => 72,
                "probabilityOfPrecipitation" => 30,
                "isDaytime" => true,
                "isOvernight" => false,
                "timeLabel" => "6AM-6PM",
            ],
            [
                "shortDayName" => "Tue",
                "dayName" => "Tuesday",
                "monthAndDay" => "May 7",
                "startTime" => "2024-05-07T18:00:00-05:00",
                "shortForecast" => "Third period",
                "icon" => (object) [
                    "icon" => "mostly_clear-day.svg",
                    "base" => "mostly_clear-day",
                ],
                "temperature" => 89,
                "probabilityOfPrecipitation" => null,
                "isDaytime" => false,
                "isOvernight" => false,
                "timeLabel" => "6PM-6AM",
            ],
        ];

        $actual = $this->block->build($now);

        $this->assertEquals(3, count($actual["today"]));
        unset($actual["today"][0]["hourlyPeriods"]);
        unset($actual["today"][1]["hourlyPeriods"]);
        unset($actual["today"][2]["hourlyPeriods"]);

        $this->assertEquals($expected, $actual["today"]);
    }

    /**
     * Ensure that before midnight, we do not have an overnight period for today
     *
     * @group e2e
     */
    public function testBeforeMidnightPeriodIsNight()
    {
        $now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2024-05-06T23:59:00-0500",
        );

        $this->onLocationRoute(32.778, -96.796);

        $expected = [
            [
                "shortDayName" => "Mon",
                "dayName" => "Monday",
                "monthAndDay" => "May 6",
                "startTime" => "2024-05-06T23:00:00-05:00",
                "shortForecast" => "First period",
                "icon" => (object) [
                    "icon" => "thunderstorm.svg",
                    "base" => "thunderstorm",
                ],
                "temperature" => 83,
                "probabilityOfPrecipitation" => 30,
                "isDaytime" => false,
                "isOvernight" => false,
                "timeLabel" => "6PM-6AM",
            ],
        ];

        $actual = $this->block->build($now);

        $this->assertEquals(1, count($actual["today"]));
        unset($actual["today"][0]["hourlyPeriods"]);

        $this->assertEquals($expected, $actual["today"]);
    }

    /**
     * Ensure we do not have an overnight period after 6am.
     *
     * @group e2e
     */
    public function testAfter6amThereIsNoOvernight()
    {
        $now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2024-05-07T06:01:00-0500",
        );

        $this->onLocationRoute(32.778, -96.796);

        $expected = [
            [
                "shortDayName" => "Tue",
                "dayName" => "Tuesday",
                "monthAndDay" => "May 7",
                "startTime" => "2024-05-07T06:00:00-05:00",
                "shortForecast" => "Second period",
                "icon" => (object) [
                    "icon" => "thunderstorm.svg",
                    "base" => "thunderstorm",
                ],
                "temperature" => 72,
                "probabilityOfPrecipitation" => 30,
                "isDaytime" => true,
                "isOvernight" => false,
                "timeLabel" => "6AM-6PM",
            ],
            [
                "shortDayName" => "Tue",
                "dayName" => "Tuesday",
                "monthAndDay" => "May 7",
                "startTime" => "2024-05-07T18:00:00-05:00",
                "shortForecast" => "Third period",
                "icon" => (object) [
                    "icon" => "mostly_clear-day.svg",
                    "base" => "mostly_clear-day",
                ],
                "temperature" => 89,
                "probabilityOfPrecipitation" => null,
                "isDaytime" => false,
                "isOvernight" => false,
                "timeLabel" => "6PM-6AM",
            ],
        ];

        $actual = $this->block->build($now);

        $this->assertEquals(2, count($actual["today"]));
        unset($actual["today"][0]["hourlyPeriods"]);
        unset($actual["today"][1]["hourlyPeriods"]);

        $this->assertEquals($expected, $actual["today"]);
    }

    /**
     * Ensure that we set the flag for only low temp after 6pm
     *
     * @group e2e
     * @group eric
     */
    public function testOnlyLowAfter6pmToday()
    {
        $now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2024-05-07T18:01:00-0500",
        );

        $this->onLocationRoute(32.778, -96.796);

        $actual = $this->block->build($now);

        $this->assertTrue($actual['useOnlyLowForToday']);
    }
}
