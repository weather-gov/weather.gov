<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\weather_blocks\Plugin\Block\WeatherStoryBlock;

/**
 * Tests for the WeatherStory block.
 */
final class WeatherStoryBlockTest extends Base
{
    protected function setUp($type = null, $override = true): void
    {
        parent::setUp(WeatherStoryBlock::class);
    }

    protected function setupEntityAPIMocksForGoodStory($withImage)
    {
        // Setup fetching the actual node.
        $story = $this->createStub(FieldItemListInterface::class);
        $imageField = $this->createStub(FieldItemListInterface::class);
        $titleField = $this->createStub(FieldItemListInterface::class);
        $bodyField = $this->createStub(FieldItemListInterface::class);
        $changedField = (object) ["value" => 235984600];

        $story
            ->method("get")
            ->will(
                $this->returnValueMap([
                    ["field_image", $imageField],
                    ["title", $titleField],
                    ["body", $bodyField],
                    ["changed", $changedField],
                ]),
            );

        $altTextField = $this->createStub(FieldItemListInterface::class);
        $uriField = $this->createStub(FieldItemListInterface::class);

        $imageField
            ->method("get")
            ->will(
                $this->returnValueMap([
                    [0, $withImage ? $imageField : null],
                    ["alt", $altTextField],
                    ["uri", $uriField],
                ]),
            );
        $imageField
            ->method("__get")
            ->will($this->returnValueMap([["entity", $imageField]]));

        $altTextField->method("getString")->willReturn("image alt text");
        $uriField->method("getString")->willReturn("image url");

        $titleField->method("getString")->willReturn("Weather Story Title");
        $bodyField
            ->method("getValue")
            ->willReturn([["value" => "Weather story body"]]);

        $this->entityService
            ->method("getLatestNodeFromWFO")
            ->willReturn($story);
    }

    /**
     * Test that the block returns the expected data if we're on a grid route.
     * @group unit
     * @group block
     * @group weather-story-block
     */
    public function testReturnsAWeatherStory(): void
    {
        $this->block->setConfigurationValue("wfo", "BOB");

        $this->setupEntityAPIMocksForGoodStory(true);

        $expected = [
            "title" => "Weather Story Title",
            "body" => "Weather story body",
            "image" => [
                "alt" => "image alt text",
                "uri" => "image url",
            ],
            "updated" => [
                "formatted" => "Jun 24, 1977, 7:16 AM",
                "utc" => "1977-06-24T07:16:40+00:00",
            ],
        ];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns the expected data if there's no image.
     * @group unit
     * @group block
     * @group weather-story-block
     */
    public function testReturnsAWeatherStoryWithNoImage(): void
    {
        $this->block->setConfigurationValue("wfo", "BOB");

        $this->setupEntityAPIMocksForGoodStory(false);

        $expected = [
            "title" => "Weather Story Title",
            "body" => "Weather story body",
            "image" => null,
            "updated" => [
                "formatted" => "Jun 24, 1977, 7:16 AM",
                "utc" => "1977-06-24T07:16:40+00:00",
            ],
        ];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns null if we're not on a grid route.
     * @group unit
     * @group block
     * @group weather-story-block
     */
    public function testBuildNotGridRoute(): void
    {
        $actual = $this->block->build();

        $this->assertEquals([], $actual);
    }

    /**
     * Override the base test to disable it.
     * @group unit
     * @group block
     * @group weather-story-block
     */
    public function testHandlesExceptions(): void
    {
        $this->assertEquals(true, true);
    }
}
