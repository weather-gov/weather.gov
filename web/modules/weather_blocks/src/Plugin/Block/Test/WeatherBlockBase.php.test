<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Form\FormStateInterface;
use Drupal\weather_blocks\Plugin\Block\WeatherStoryBlock;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Tests for the WeatherBlockBaseTest block.
 */
final class WeatherBlockBaseTest extends Base
{
    /**
     * Common setup for all component tests.
     *
     * Creates a mock of a weather data service and injects it into a new current
     * conditions block object.
     */
    protected function setUp($type = null, $override = true): void
    {
        // Instantiate a real object because the base class is abstract.
        parent::setUp(WeatherStoryBlock::class, false);
    }

    /**
     * Test that the create() static method gives us back a block object.
     * @group unit
     * @group block
     * @group base-block
     */
    public function testCreation(): void
    {
        $container = $this->createStub(ContainerInterface::class);
        $container->method("get")->will(
            $this->returnCallback(function () {
                $args = func_get_args();
                switch ($args[0]) {
                    case "weather_data":
                        return $this->weatherData;

                    case "current_route_match":
                        return $this->routeMock;

                    case "weather_entity":
                        return $this->entityService;

                    default:
                        return null;
                }
            }),
        );

        $actual = WeatherStoryBlock::create($container, [], "", [
            "provider" => "weather_blocks",
        ]);
        $this->assertEquals(WeatherStoryBlock::class, $actual::class);
    }

    /**
     * Test that block cacheing is disabled.
     * @group unit
     * @group block
     * @group base-block
     */
    public function testCache(): void
    {
        $expected = 0;
        $actual = $this->block->getCacheMaxAge();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block properly persists configuration changes.
     * @group unit
     * @group block
     * @group base-block
     */
    public function testBlockSubmit(): void
    {
        $expected = "wfo,x,y";

        $formState = $this->createStub(FormStateInterface::class);
        $formState->method("getValue")->willReturn([
            "wfo" => "wfo",
            "gridX" => "x",
            "gridY" => "y",
        ]);

        $this->block->blockSubmit([], $formState);

        $actual = $this->block->getConfiguration()["grid"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group block
     * @group base-block
     */
    public function testGetsFormWithNoConfig(): void
    {
        $expected = [
            "grid" => [
                "#type" => "fieldset",
                "#title" => "Manual location - for testing",
                "wfo" => [
                    "#type" => "textfield",
                    "#title" => "WFO",
                    "#default_value" => "",
                ],
                "gridX" => [
                    "#type" => "textfield",
                    "#title" => "Grid X coordinate",
                    "#default_value" => "",
                ],
                "gridY" => [
                    "#type" => "textfield",
                    "#title" => "Grid Y coordinate",
                    "#default_value" => "",
                ],
            ],
        ];

        $actual = $this->block->blockForm(
            [],
            $this->createStub(FormStateInterface::class),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group block
     * @group base-block
     */
    public function testGetsFormWithExistingConfig(): void
    {
        $this->block->setConfigurationValue("grid", "bob,37,38");

        $expected = [
            "grid" => [
                "#type" => "fieldset",
                "#title" => "Manual location - for testing",
                "wfo" => [
                    "#type" => "textfield",
                    "#title" => "WFO",
                    "#default_value" => "bob",
                ],
                "gridX" => [
                    "#type" => "textfield",
                    "#title" => "Grid X coordinate",
                    "#default_value" => "37",
                ],
                "gridY" => [
                    "#type" => "textfield",
                    "#title" => "Grid Y coordinate",
                    "#default_value" => "38",
                ],
            ],
        ];

        $actual = $this->block->blockForm(
            [],
            $this->createStub(FormStateInterface::class),
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * Override the base test to disable it.
     * @group unit
     * @group block
     * @group base-block
     */
    public function testHandlesExceptions(): void
    {
        $this->assertEquals(true, true);
    }
}
