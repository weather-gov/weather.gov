<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use Drupal\weather_data\Service\WeatherEntityService;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

/**
 * Base setup for weather blocks tests.
 */
abstract class Base extends TestCase
{
    /**
     * A ready-to-use weather block object.
     *
     * @var block
     */
    protected $block;

    /**
     * A mock entity type manager.
     *
     * @var entityTypeManagerMock
     */
    protected $entityServie;

    /**
     * Common setup for all component tests.
     */
    protected function setUp($type = null, $override = true): void
    {
        parent::setUp();

        $definition = [
            "provider" => "weather_blocks",
        ];

        $methods = ["getLogger"];
        if ($override) {
            $methods[] = "getLocation";
        }

        $this->entityService = $this->createStub(WeatherEntityService::class);

        $this->block = $this->getMockBuilder($type)
            ->setConstructorArgs([[], "", $definition, $this->entityService])
            ->setMethods($methods)
            ->getMock();

        $logger = $this->createMock(LoggerInterface::class);
        $this->block->method("getLogger")->willReturn($logger);
    }

    /**
     * @group unit
     * @group block
     */
    public function testHandlesExceptions(): void
    {
        $this->onLocationRoute();

        $exceptionMethods = [
            "alertsToHourlyPeriods",
            "getAlerts",
            "getCurrentConditionsFromGrid",
            "getDailyForecastFromGrid",
            "getHourlyForecastFromGrid",
            "getHourlyPrecipitation",
            "getPlaceFromGrid",
        ];

        foreach ($exceptionMethods as $method) {
            $this->weatherData
                ->method($method)
                ->willThrowException(new \Exception());
        }

        $expected = ["error" => true];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }
}
