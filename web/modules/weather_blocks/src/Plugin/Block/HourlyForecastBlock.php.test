<?php

namespace Drupal\weather_blocks\Plugin\Block;

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\WeatherDataService;
use PHPUnit\Framework\TestCase;

/**
 * Tests for the HourlyForecast block.
 */
final class HourlyForecastBlockTest extends TestCase {
  /**
   * A ready-to-use hourly forecast block.
   *
   * @var hourlyForecastBlock
   */
  protected $hourlyForecastBlock;

  /**
   * A mock of the route object.
   *
   * @var routeMock
   */
  protected $routeMock;

  /**
   * A mocked WeatherData service object.
   *
   * @var weatherData
   *
   * This is injected into the current conditions block object being tested with
   * dependency injection.
   */
  protected $weatherData;

  /**
   * Common setup for all component tests.
   *
   * Creates a mock of a weather data service and injects it into a new current
   * conditions block object.
   */
  protected function setUp() : void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.grid");

    $this->hourlyForecastBlock = new HourlyForecastBlock([], '', $definition, $this->weatherData, $this->routeMock);

  }

  /**
   * Test that the block returns the expected data if we're on a grid route.
   */
  public function testBuild() : void {
    $this->weatherData
      ->method('getHourlyForecast')
      ->willReturn([1, 2, 3, 4, 5, 6, 7, 8, 9]);

    $expected = [
      "#theme" => "weather_blocks_hourly_forecast",
      "#data" => [1, 2, 3, 4],
    ];
    $actual = $this->hourlyForecastBlock->build();

    $this->assertEquals($expected, $actual);
  }

  /**
   * Test that the block returns null if we're not on a grid route.
   */
  public function testBuildNotGridRoute(): void {
    $definition = [
      "provider" => "weather_blocks",
    ];

    $this->weatherData = $this->createStub(WeatherDataService::class);

    $this->routeMock = $this->createStub(RouteMatchInterface::class);
    $this->routeMock->method('getRouteName')->willReturn("weather_routes.not-grid");

    $this->hourlyForecastBlock = new HourlyForecastBlock([], '', $definition, $this->weatherData, $this->routeMock);

    $actual = $this->hourlyForecastBlock->build();

    $this->assertEquals(NULL, $actual);
  }

}
