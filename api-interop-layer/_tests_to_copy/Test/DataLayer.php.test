<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Database\Connection;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\DataLayer;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

final class DataLayerTest extends TestCase
{
    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProductsByType(): void
    {
        $expected = (object) [
            "hello" => "test",
        ];
        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode(
                    (object) [
                        "@graph" => [
                            "hello" => "test",
                        ],
                    ],
                ),
            ),
        );

        $actual = $dataLayer->getProductsByType("AFD");

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/types/AFD",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProductsByTypeAndOffice(): void
    {
        $type = "TEST";
        $office = "UNK";
        $input = (object) [
            "@graph" => [
                "more" => "products",
            ],
        ];

        $expected = (object) [
            "more" => "products",
        ];

        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode($input),
            ),
        );
        $actual = $dataLayer->getProductsByTypeAndOffice($type, $office);

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/types/TEST/locations/UNK",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProduct(): void
    {
        $uuid = "1234-5678-abcd";
        $expected = (object) [
            "some" => "product",
        ];
        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode($expected),
            ),
        );
        $actual = $dataLayer->getProduct($uuid);

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/1234-5678-abcd",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }
}
