<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Database\Connection;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\weather_data\Service\DataLayer;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use GuzzleHttp\Psr7\Response;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

final class DataLayerTest extends TestCase
{
    private $httpHistory;
    private $httpClient;
    private $cache;
    private $database;
    private $route;

    protected function setUp(): void
    {
        parent::setUp();

        $this->cache = $this->createMock(CacheBackendInterface::class);
        $this->database = $this->createMock(Connection::class);
        $this->route = $this->createMock(RouteMatchInterface::class);
    }

    private function setHttpClient()
    {
        if (!$this->httpClient) {
            $this->httpClient = new MockHandler([]);
        }
    }

    private function getDataLayer($preload = false)
    {
        $this->setHttpClient();
        $this->httpHistory = [];
        $history = Middleware::history($this->httpHistory);

        $stack = HandlerStack::create($this->httpClient);
        $stack->push($history);
        $client = new Client(["handler" => $stack]);

        $dataLayer = $this->getMockBuilder(DataLayer::class)
            ->setConstructorArgs([
                $client,
                $this->cache,
                $this->database,
                $this->route,
                $preload,
            ])
            ->setMethods(["getLogger"])
            ->getMock();

        $logger = $this->createMock(LoggerInterface::class);
        $dataLayer->method("getLogger")->willReturn($logger);

        return $dataLayer;
    }

    private function getFails($count = 1)
    {
        $fails = [];

        for ($i = 0; $i < $count; $i += 1) {
            $fails[] = new Response(
                500,
                ["Content-type" => "application/json"],
                '{"call":' . $i + 1 . "}",
            );
        }

        return $fails;
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testRetriesOnce(): void
    {
        $dataLayer = $this->getDataLayer();

        $this->httpClient->append(...$this->getFails(1));
        $this->httpClient->append(
            new Response(
                200,
                ["Content-type" => "application/json"],
                '{"features":2}',
            ),
        );

        $expected = 2;

        $actual = $dataLayer->getAlertsForState("LA");

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testRetriesFiveTimes(): void
    {
        $dataLayer = $this->getDataLayer();

        $this->httpClient->append(...$this->getFails(4));
        $this->httpClient->append(
            new Response(
                200,
                ["Content-type" => "application/json"],
                '{"properties":5}',
            ),
        );

        $expected = 5;

        // Call a different method to defeat caching.
        $actual = $dataLayer->getDailyForecast("wfo", 1, 1);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testFailsAfterFive(): void
    {
        $dataLayer = $this->getDataLayer();

        $this->httpClient->append(...$this->getFails(5));

        $this->expectException(\Throwable::class);

        // Call a different method to defeat caching.
        $actual = $dataLayer->getGridpoint("wfo", 1, 1);
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testDoesNotPreloadIfFalse(): void
    {
        $this->getDataLayer();
        $this->assertEquals(0, count($this->httpHistory));
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testDoesNotPreloadIfNotPointRoute(): void
    {
        $this->route
            ->method("getRouteName")
            ->willReturn("weather_routes.not_a_point");

        $this->getDataLayer(true);

        $this->assertEquals(0, count($this->httpHistory));
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testDoesPreload(): void
    {
        $this->setHttpClient();
        $this->route
            ->method("getRouteName")
            ->willReturn("weather_routes.point");

        $this->route
            ->method("getParameter")
            ->will($this->returnValueMap([["lat", 0], ["lon", 200]]));

        // First call should map a lat/lon to WFO grid
        $this->httpClient->append(
            new Response(
                200,
                ["Content-type", "application/json"],
                '{
                  "properties": {
                    "gridId": "fakeWfo",
                    "gridX":100,
                    "gridY":300,
                    "relativeLocation": {
                      "properties": {
                        "state": "FR"
                      }
                    }
                  }
                }',
            ),
        );

        // Next four calls are fetching from the grid, but the preloader doesn't
        // examine their content, so we can just roll.
        for ($i = 0; $i < 4; $i++) {
            $this->httpClient->append(new Response(200));
        }

        // The sixth fetch call should get a list of observation stations. The
        // preloader uses this to get a URL for fetching observations, so we
        // do actually need to return data.
        $this->httpClient->append(
            new Response(
                200,
                ["Content-type", "application/json"],
                '{
                  "features":[{
                    "properties": {
                      "stationIdentifier": "BOBSVILLE"
                    }
                  }]
                }',
            ),
        );

        // The last call should be for current observations. But since we again
        // don't examine its content, it doesn't matter what we return.
        $this->httpClient->append(new Response(200));

        $dataLayer = $this->getDataLayer(true);

        $expected = [
            "/points/0,200",
            "/alerts/active?status=actual&area=FR",
            "/gridpoints/FAKEWFO/100,300/forecast",
            "/gridpoints/FAKEWFO/100,300",
            "/gridpoints/FAKEWFO/100,300/forecast/hourly",
            "/gridpoints/FAKEWFO/100,300/stations",
            "/stations/BOBSVILLE/observations?limit=1",
        ];

        $this->assertEquals(7, count($this->httpHistory));

        $actual = array_map(function ($transaction) {
            $path = $transaction["request"]->getUri()->getPath();
            $query = $transaction["request"]->getUri()->getQuery();
            if ($query) {
                $path = $path . "?" . $query;
            }
            return $path;
        }, $this->httpHistory);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetSatelliteMetadata(): void
    {
        $expected = (object) [
            "satellite" => "is got",
        ];

        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-type", "application/json"],
                json_encode($expected),
            ),
        );

        $actual = $dataLayer->getSatelliteMetadata("BOB");

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/WFO/catalogs/WFO_02_bob_catalog.json",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProductsByType(): void
    {
        $expected = (object) [
            "hello" => "test",
        ];
        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode(
                    (object) [
                        "@graph" => [
                            "hello" => "test",
                        ],
                    ],
                ),
            ),
        );

        $actual = $dataLayer->getProductsByType("AFD");

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/types/AFD",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProductsByTypeAndOffice(): void
    {
        $type = "TEST";
        $office = "UNK";
        $input = (object) [
            "@graph" => [
                "more" => "products",
            ],
        ];

        $expected = (object) [
            "more" => "products",
        ];

        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode($input),
            ),
        );
        $actual = $dataLayer->getProductsByTypeAndOffice($type, $office);

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/types/TEST/locations/UNK",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }

    /**
     * @group unit
     * @group data-layer
     */
    public function testGetProduct(): void
    {
        $uuid = "1234-5678-abcd";
        $expected = (object) [
            "some" => "product",
        ];
        $dataLayer = $this->getDataLayer(false);
        $this->httpClient->append(
            new Response(
                200,
                ["Content-Type", "application/json"],
                json_encode($expected),
            ),
        );
        $actual = $dataLayer->getProduct($uuid);

        $this->assertEquals($expected, $actual);
        $this->assertEquals(
            "GET",
            $this->httpHistory[0]["request"]->getMethod(),
        );
        $this->assertEquals(
            "/products/1234-5678-abcd",
            $this->httpHistory[0]["request"]->getURI()->getPath(),
        );
    }
}
