<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\LocalAlertsBlock;

/**
 * Tests for alerts data structure.
 */
final class AlertsStructureTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(LocalAlertsBlock::class);
    }

    /**
     * Simply validate the data structure.
     * @group e2e
     */
    public function testAlertDataStructure(): void
    {
        $this->onLocationRoute(34.749, -92.275);

        $schema = SchemaHelper::load("alerts.json");

        $data = $this->block->build();

        // Allow other properties than just those defined in the schema. This
        // is because we pass a lot of stuff on straight from the API but we
        // don't use it. We probably ought to address that and only keep the
        // parts we use OR fully document the schema from the API (yikes).
        $schema->setAdditionalProperties(true);

        foreach ($data["alerts"] as $alert) {
            // PHP's associative arrays can't be directly represented in JSON,
            // so encode and then decode the alert object so everything looks
            // the way it will to Twig.
            $alert = json_decode(json_encode($alert));
            $schema->in($alert);
        }

        $this->assertTrue(true);
    }

    /**
     * @group e2e
     */
    public function testAlertDurationText(): void
    {
        $this->onLocationRoute(39.738, -104.985);

        $now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2024-04-30T01:00:00-0700",
        );

        $expected = [
            "until 2:00 AM today",
            "until Wednesday 05/01 2:00 AM MDT",
            "is in effect",
            "this morning",
            "this afternoon",
            "tonight",
            "tomorrow morning",
            "tomorrow afternoon",
            "tomorrow night",
            "Thursday",
        ];

        $data = $this->block->build($now);

        $durations = array_map(function ($alert) {
            return $alert->durationText;
        }, $data["alerts"]);

        $this->assertTrue(true);

        $this->assertEquals($expected, $durations);
    }
}
