<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\DailyForecastBlock;

/**
 * Tests for daily forecast data structure.
 */
final class DailyForecastWithHourlyDataTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(DailyForecastBlock::class);
    }

    /**
     * Validate that today's hours start at the top of the hour.
     * @group e2e
     */
    public function testTodayHoursBeginNextHour(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        $start = new \DateTimeImmutable();
        $start = $start->setTimezone(new \DateTimeZone("America/Chicago"));

        $hour = (int) $start->format("H");
        $start = $start->setTime($hour + 1, 0, 0, 0);

        $data = $this->block->build();

        $this->assertEquals(
            $start->format("c"),
            $data[0]["hourPeriods"][0]["timestamp"],
        );
    }

    /**
     * @group e2e
     */
    public function testBeforeMidnightEndsAt6amTomorrow(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        // We will look at the weather at 9:15pm point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("America/Chicago"));
        $now = $now->setTime(21, 15, 0);

        $expected = [
            "10 PM",
            "11 PM",
            "12 AM",
            "1 AM",
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
        ];

        $data = $this->block->build($now);

        $actual = array_map(function ($hour) {
            return $hour["time"];
        }, $data[0]["hourPeriods"]);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testAfterMidnightEndAt6amTomorrow(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("America/Chicago"));
        $now = $now->modify("+1 day");
        $now = $now->setTime(1, 15, 0);

        $expected = [
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
            "7 AM",
            "8 AM",
            "9 AM",
            "10 AM",
            "11 AM",
            "12 PM",
            "1 PM",
            "2 PM",
            "3 PM",
            "4 PM",
            "5 PM",
            "6 PM",
            "7 PM",
            "8 PM",
            "9 PM",
            "10 PM",
            "11 PM",
            "12 AM",
            "1 AM",
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
        ];

        $data = $this->block->build($now);

        $actual = array_map(function ($hour) {
            return $hour["time"];
        }, $data[0]["hourPeriods"]);

        $this->assertEquals($expected, $actual);
    }

    /**
     * Validates that extended hourly periods are 6am to 6am.
     * @group e2e
     */
    public function testDetailedHourlyPeriods(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        $start = new \DateTimeImmutable();
        $start = $start->setTimezone(new \DateTimeZone("America/Chicago"));
        $start = $start->setTime(6, 0, 0, 0);

        $data = $this->block->build();

        $extended = array_slice($data, 1);
        foreach ($extended as $period) {
            $start = $start->modify("+1 day");
            $hourly = $period["hourPeriods"];

            $this->assertEquals($start->format("c"), $hourly[0]["timestamp"]);
            $this->assertEquals(
                $start->modify("+1 day")->format("c"),
                end($hourly)["timestamp"],
            );

            // 25 hours, to be inclusive of both 6ams.
            $this->assertEquals(25, count($hourly));
        }
    }
}
