<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\HourlyForecastBlock;

/**
 * Tests for hourly forecast data structure.
 */
final class HourlyForecastStructureTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(HourlyForecastBlock::class);
    }

    /**
     * Simply validate the data structure.
     * @group e2e
     */
    public function testHourlyForecastDataStructure(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        $schema = SchemaHelper::load("hourly.json");

        $data = $this->block->build();

        $schema->in(json_decode(json_encode($data["hours"][0])));
        $this->assertTrue(true);
    }

    /**
     * Test that hourly results are in the timezone of the point.
     * @group e2e
     */
    public function testHourlyForecastTimezone(): void
    {
        // This test could fail for a bit around the daylight savings and
        // standard time transitions, but that seems acceptable...

        $this->onLocationRoute(33.521, -86.812);

        $timezone = new \DateTimeZone("America/Chicago");
        $now = new \DateTimeImmutable();
        $offset = $timezone->getOffset($now);

        $data = $this->block->build();

        foreach ($data["hours"] as $period) {
            $time = \DateTimeImmutable::createFromFormat(
                \DateTimeInterface::ISO8601_EXPANDED,
                $period["timestamp"],
            );

            // The time from the timestamp should have offset information
            // embedded in it. So we'll just compare the two.
            $this->assertEquals($offset, $time->getOffset());
        }
    }

    /**
     * @group e2e
     */
    public function testHourlyApparentTemperature(): void
    {
        $this->onLocationRoute(33.521, -86.812);
        $expected = 94;

        $data = $this->block->build();

        $actual = $data["hours"][1]["apparentTemperature"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testHourlyWindGustNullIfCloseToSustained(): void
    {
        $this->onLocationRoute(33.521, -86.812);
        $expected = null;

        $data = $this->block->build();

        $actual = $data["hours"][0]["windGust"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testHourlyWindGusts(): void
    {
        $this->onLocationRoute(33.521, -86.812);
        $expected = 8;

        $data = $this->block->build();

        $actual = $data["hours"][1]["windGust"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testForecastBeginAtTheTopOfTheNextHour(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("America/Chicago"));
        $now = $now->modify("+1 day");
        $now = $now->setTime(2, 15, 0);

        $expected = "3 AM";

        $data = $this->block->build($now);

        $actual = $data["hours"][0]["time"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testBeforeMidnightEndsAt6amTomorrow(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("America/Chicago"));
        $now = $now->setTime(21, 15, 0);

        $expected = [
            "10 PM",
            "11 PM",
            "12 AM",
            "1 AM",
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
        ];

        $data = $this->block->build($now);

        $actual = array_map(function ($hour) {
            return $hour["time"];
        }, $data["hours"]);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group e2e
     */
    public function testAfterMidnightEndAt6amTomorrow(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("America/Chicago"));
        $now = $now->modify("+1 day");
        $now = $now->setTime(1, 15, 0);

        $expected = [
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
            "7 AM",
            "8 AM",
            "9 AM",
            "10 AM",
            "11 AM",
            "12 PM",
            "1 PM",
            "2 PM",
            "3 PM",
            "4 PM",
            "5 PM",
            "6 PM",
            "7 PM",
            "8 PM",
            "9 PM",
            "10 PM",
            "11 PM",
            "12 AM",
            "1 AM",
            "2 AM",
            "3 AM",
            "4 AM",
            "5 AM",
            "6 AM",
        ];

        $data = $this->block->build($now);

        $actual = array_map(function ($hour) {
            return $hour["time"];
        }, $data["hours"]);

        $this->assertEquals($expected, $actual);
    }
}
