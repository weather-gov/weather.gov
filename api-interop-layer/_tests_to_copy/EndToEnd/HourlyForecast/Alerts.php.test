<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\HourlyForecastBlock;
use Swaggest\JsonSchema\Schema;

/**
 * Tests that hourly forecast data is filtered to the future.
 */
final class HourlyForecastAlertTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(HourlyForecastBlock::class);
    }
    /**
     * Simply validate the data structure.
     * @group e2e
     */
    public function testHourlyAlertDataStructure(): void
    {
        $this->onLocationRoute(34.749, -92.275);

        $isoRegex =
            "^2[0-9]{3}-[0-9]{2}-[0-9]{2}T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]\\\\+[0-9]{2}:[0-9]{2}$";
        $formattedDateRegex =
            "^.+day, [0-1][0-9]\\\\/[0-3][0-9], [1-2]?[0-9]:[0-5][0-9] (A|P)M [A-Z]{3}";

        $schema = Schema::import(
            json_decode(
                <<<JSON
                {
                    "type": "object",
                    "properties": {
                        "@id": {
                            "type": "string",
                            "pattern": "^https://api\\\\.weather\\\\.gov/alerts/urn:oid:.*$"
                        },
                        "@type": {
                            "const": "wx:Alert"
                        },
                        "id": {
                            "type": "string",
                            "pattern": "^urn:oid:.*$"
                        },
                        "areaDesc": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "geocode": {
                            "type": "object",
                            "properties": {
                                "SAME": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "UGC": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "affectedZones": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "pattern": "^https://api\\\\.weather\\\\.gov/zones/(forecast|county|fire)/.*$"
                            }
                        },
                        "sent": {
                            "type": "string",
                            "pattern": "$isoRegex"
                        },
                        "effective": {
                            "type": "string",
                            "pattern": "$isoRegex"
                        },
                        "onsetRaw": {
                            "type": "string",
                            "pattern": "$isoRegex"
                        },
                        "endsRaw": {
                            "type": "string",
                            "pattern": "$isoRegex"
                        },
                        "expiresRaw": {
                            "type": "string",
                            "pattern": "$isoRegex"
                        },
                        "onset": {
                            "type": "string",
                            "pattern": "$formattedDateRegex"
                        },
                        "ends": {
                            "type": "string",
                            "pattern": "$formattedDateRegex"
                        },
                        "expires": {
                            "type": "string",
                            "pattern": "$formattedDateRegex"
                        },
                        "event": {
                            "type": "string"
                        },
                        "headline": {
                            "type": "string"
                        },
                        "description": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "heading",
                                            "paragraph"
                                        ]
                                    },
                                    "text": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "instruction": {
                        "type": "string"
                    },
                    "response": {
                        "type": "string"
                    },
                    "geometry": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "const": "Polygon"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "timezone": {
                        "type": "string",
                        "pattern": "^.+\\\\/.+$"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "alertId": {
                        "type": "integer"
                    }
                }
                JSON
                ,
            ),
        );

        $data = $this->block->build();

        $schema->in(json_decode(json_encode($data["alertPeriods"][0])));
        $this->assertTrue(true);
    }

    /**
     * Test that alerts align correctly to hourly periods.
     * @group e2e
     */
    public function testAlertsAlignToHourlyPeriods(): void
    {
        $this->onLocationRoute(34.749, -92.275);

        $data = $this->block->build();

        $this->assertEquals(0, $data["alertPeriods"][0]["periodIndex"]);
        $this->assertEquals(2, $data["alertPeriods"][1]["periodIndex"]);
    }

    /**
     * Test that alerts have the correct duration, relative to the current time.
     * @group e2e
     */
    public function testAlertDurationsAreCorrect(): void
    {
        $this->onLocationRoute(34.749, -92.275);

        $data = $this->block->build();

        $this->assertEquals(2, $data["alertPeriods"][0]["duration"]);
        $this->assertEquals(5, $data["alertPeriods"][1]["duration"]);
    }
}
