version: '3'

services:
  database:
    image: mariadb:10
    networks:
      - weather.gov
    environment:
      MYSQL_DATABASE: weathergov
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
      MYSQL_ROOT_PASSWORD: drupal

  drupal:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    image: 18f-zscaler-drupal:10-apache
    ports:
      - 8080:80
    networks:
      - weather.gov
    links:
      - database:database
    environment:
      - DRUPAL_DB_NAME=weathergov
      - DRUPAL_DB_USERNAME=drupal
      - DRUPAL_DB_PASSWORD=drupal
      - DRUPAL_DB_HOST=database
      - DRUPAL_DB_PORT=3306
    volumes:
      # Map in our composer files. That way if we make changes inside the
      # container, they'll be persisted out here in the real world.
      - ./composer.json:/opt/drupal/composer.json
      - ./composer.lock:/opt/drupal/composer.lock

      # Map in our sites directory. This includes our settings.php.
      - ./web/sites:/opt/drupal/web/sites

      # Map in our modules, themes, and site settings. But be sure not to map in
      # any contrib directories, since those are 3rd-party installs from
      # composer. If we map them in, we'll overwrite what's in the container,
      # and we don't really want that.
      - ./web/modules:/opt/drupal/web/modules
      - ./web/themes:/opt/drupal/web/themes
      - /opt/drupal/web/modules/contrib
      - /opt/drupal/web/themes/contrib

      # Map in saved configuration. This is used to import configuration and it
      # is also where configuration gets exported to. The target/container
      # directory needs to match the value of $settings['config_sync_directory']
      # in settings.php
      - ./web/config:/opt/drupal/web/config
      - ./web/scs-export:/opt/drupal/web/scs-export

      # And finally map in our phpcs file, so we can run php-codesniffer inside
      # the container.
      - ./phpcs.xml:/opt/drupal/phpcs.xml
      - ./phpunit.xml:/opt/drupal/phpunit.xml

networks:
  weather.gov:
